name: Release on Updated ISO

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday at midnight UTC
  workflow_dispatch:  # Allows manual triggering of the workflow

permissions:
  contents: write  # Allow writing to the repository (needed for creating tags/releases)

jobs:
  release-on-updated-iso:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}  # Use the PAT for checkout

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ">=3.12"

      - name: Install Script dependencies
        run: pip install toml requests

      - name: Download ISO 4217 currencies to local
        run: python gha_download_iso4217_currencies.py

      - name: Retrieve versions and update if applies in pyproject.toml
        run: |
          python gha_retrieve_and_update_versions.py

      - name: Fail if the current version is not up to date
        if: env.IS_CURRENT_VERSION_UP_TO_DATE != 'true'
        run: |
          echo "The current version is not up to date. Stopping the workflow."
          echo "PyPI version: ${{ env.PYPI_VERSION }}"
          echo "Current version: ${{ env.CURRENT_VERSION }}"
          exit 1

      - name: Commit changes to pyproject.toml
        if: env.UPDATE_PATCH_VERSION == 'true'
        run: |
          echo "Committing changes to pyproject.toml"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git push origin HEAD

      - name: Create Tag and Release
        if: env.UPDATE_PATCH_VERSION == 'true'
        run: |
          echo "Creating tag and release for version ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

          # Create a GitHub release
          gh release create ${{ env.NEW_VERSION }} --title "Release ${{ env.NEW_VERSION }}" --notes "Auto update for PATCH version" --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 