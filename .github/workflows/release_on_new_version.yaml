name: Release on Updated ISO

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday at midnight UTC
  workflow_dispatch:  # Allows manual triggering of the workflow

permissions:
  contents: write  # Allow writing to the repository (needed for creating tags/releases)

jobs:
  release-on-updated-iso:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}  # Use the PAT for checkout

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ">=3.12"

      - name: Run pre build script
        run: |
          pip install toml
          python pre_build.py

      - name: Get package version
        id: get_version
        run: |
          # Read the version from pyproject.toml
          package_version=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Package version: $package_version"
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV
          echo "PACKAGE_PATCH_VERSION=$(echo "$package_version" | cut -d '.' -f 3)" >> $GITHUB_ENV

      - name: Get version from PyPI
        id: pypi_version
        run: |
          # Fetch the version from PyPI using the requests library
          pip install requests
          pypi_version=$(python -c "import requests; response = requests.get('https://pypi.org/pypi/iso4217-money/json'); print(response.json()['info']['version'])")
          echo "Version on PyPI: $pypi_version"
          echo "PYPI_VERSION=$pypi_version" >> $GITHUB_ENV
          echo "PYPI_PATCH_VERSION=$(echo "$pypi_version" | cut -d '.' -f 3)" >> $GITHUB_ENV

      - name: Check for new version
        id: check_version
        run: |
          echo "Package PATCH version: $PACKAGE_PATCH_VERSION"
          echo "PyPI PATCH version: $PYPI_PATCH_VERSION"

          # Compare PATCH versions
          if [ "$PACKAGE_PATCH_VERSION" -gt "$PYPI_PATCH_VERSION" ]; then
            echo "New PATCH version detected: $PACKAGE_VERSION"
            echo "NEW_VERSION=true" >> $GITHUB_ENV
          else
            echo "No new PATCH version detected."
            echo "NEW_VERSION=false" >> $GITHUB_ENV
          fi

      - name: Create Tag and Release
        if: env.NEW_VERSION == 'true'
        run: |
          echo "Creating tag and release for version $PACKAGE_VERSION"
          git tag $PACKAGE_VERSION
          git push origin $PACKAGE_VERSION

          # Create a GitHub release
          gh release create $PACKAGE_VERSION --title "Release $PACKAGE_VERSION" --notes "Auto update for PATCH $PACKAGE_PATCH_VERSION" --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 